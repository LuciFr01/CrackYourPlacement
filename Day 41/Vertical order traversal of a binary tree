/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


class Solution {
public:
void solve(TreeNode *root, map<pair<int,int>,vector<int>>&mp,int i,int j){
    if(root==NULL){
        return ;
    }
    mp[{i,j}].push_back(root->val);
    solve(root->left,mp,i+1,j-1);
    solve(root->right,mp,i+1,j+1);
}
    vector<vector<int>> verticalTraversal(TreeNode* root) {
    map<pair<int,int>,vector<int>>mp;
    vector<vector<int>>ans;
    int i=0;
    int j=0;
    solve(root,mp,0,0);
map<int,vector<int>>mp2;
    for(auto &it:mp){
        pair<int,int>p = it.first;
        sort(it.second.begin(),it.second.end());
        }

        for(auto &it:mp){
            pair<int,int>p =it.first;
            vector<int>v =it.second;
            int xx = p.first;
            int yy = p.second;
        for(int i=0;i<v.size();i++){
            mp2[yy].push_back(v[i]);
   }
                  }
                for(auto &it:mp2){
                    vector<int>vv = it.second;
                    ans.push_back(vv);
                }
                return ans;
    }
};
