    bool isSafe(int node, int colour[], int m, int n, bool graph[101][101], int col) {
        for (int k = 0; k < n; k++) {
            if (k != node && graph[k][node] == 1 && colour[k] == col)
                return false;
        }
        return true;
    }

    bool solve(int node, int colour[], int m, int n, bool graph[101][101]) {
        if (node == n)
            return true;
        for (int i = 1; i <= m; i++) {
            if (isSafe(node, colour, m, n, graph, i)) {
                colour[node] = i;
                if (solve(node + 1, colour, m, n, graph))
                    return true;
                colour[node] = 0; // Backtrack
            }
        }
        return false;
    }

    bool graphColoring(bool graph[101][101], int m, int n) {
        int colour[n] = {0};
        return solve(0, colour, m, n, graph);
    }
