class Solution {
private:
    void dfs(int row, int col, vector<vector<int>>& ans, vector<vector<int>>& image, int newclr, int delRow[], int delCol[], int ini) {
        int n = image.size();
        int m = image[0].size();
        
        if (row < 0 || row >= n || col < 0 || col >= m || image[row][col] != ini || ans[row][col] == newclr) {
            return;
        }

        ans[row][col] = newclr;

        for (int i = 0; i < 4; i++) {
            int nrow = row + delRow[i];
            int ncol = col + delCol[i];
            dfs(nrow, ncol, ans, image, newclr, delRow, delCol, ini);
        }
    }
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        vector<vector<int>> ans = image;
        int iniclr = image[sr][sc];
        int delRow[] = {-1, 0, 1, 0};
        int delCol[] = {0, 1, 0, -1};
        
        if (iniclr != color) {
            dfs(sr, sc, ans, image, color, delRow, delCol, iniclr);
        }
        
        return ans;
    }
};
