//{ Driver Code Starts
#include <bits/stdc++.h>

using namespace std;


// } Driver Code Ends
class twoStacks {
    vector<int> arr; 
    int size; 
    int top1, top2;
public:
    // Constructor with default size
    twoStacks() : size(1000) { // Default size is 1000; adjust as needed
        arr.resize(size); 
        top1 = size / 2 - 1; 
        top2 = size / 2; 
    }
    
    // Method to push an element onto stack 1
    void push1(int x) {
        if (top1 >= -1) { // Check for stack overflow
            arr[top1] = x; 
            top1--; 
        } 
    }
    
    // Method to push an element onto stack 2
    void push2(int x) {
        if (top2 < size) { // Check for stack overflow
            arr[top2] = x; 
            top2++; 
        } 
    }
    
    // Method to pop an element from stack 1
    int pop1() {
        if (top1 < size / 2 - 1) { // Check for stack underflow
            top1++; 
            return arr[top1]; 
        } else {
            return -1; // Return -1 on underflow
        }
    } 
    
    // Method to pop an element from stack 2
    int pop2() {
        if (top2 > size / 2) { // Check for stack underflow
            top2--; 
            return arr[top2]; 
        } else {
            return -1; // Return -1 on underflow
        }
    } 
};


//{ Driver Code Starts.

int main() {

    int T;
    cin >> T;
    while (T--) {
        twoStacks *sq = new twoStacks();

        int Q;
        cin >> Q;
        while (Q--) {
            int stack_no;
            cin >> stack_no;
            int QueryType = 0;
            cin >> QueryType;

            if (QueryType == 1) {
                int a;
                cin >> a;
                if (stack_no == 1)
                    sq->push1(a);
                else if (stack_no == 2)
                    sq->push2(a);
            } else if (QueryType == 2) {
                if (stack_no == 1)
                    cout << sq->pop1() << " ";
                else if (stack_no == 2)
                    cout << sq->pop2() << " ";
            }
        }
        cout << endl;
    }
}

// } Driver Code Ends
